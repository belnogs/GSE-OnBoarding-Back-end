/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.amf.model.impl;

import com.liferay.amf.model.Account;
import com.liferay.amf.model.AccountModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Account service. Represents a row in the &quot;AMF_Account&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccountModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccountImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccountImpl
 * @generated
 */
@JSON(strict = true)
public class AccountModelImpl
	extends BaseModelImpl<Account> implements AccountModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a account model instance should use the <code>Account</code> interface instead.
	 */
	public static final String TABLE_NAME = "AMF_Account";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accountId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"first_name", Types.VARCHAR}, {"last_name", Types.VARCHAR},
		{"email_address", Types.VARCHAR}, {"username", Types.VARCHAR},
		{"gender", Types.VARCHAR}, {"birthday", Types.TIMESTAMP},
		{"password_", Types.VARCHAR}, {"home_phone", Types.INTEGER},
		{"mobile_phone", Types.INTEGER}, {"address", Types.VARCHAR},
		{"address2", Types.VARCHAR}, {"city", Types.VARCHAR},
		{"state_", Types.VARCHAR}, {"zip", Types.INTEGER},
		{"security_question", Types.VARCHAR},
		{"security_answer", Types.VARCHAR}, {"accepted_tou", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accountId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("first_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("last_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email_address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("username", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("birthday", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("password_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("home_phone", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("mobile_phone", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zip", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("security_question", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("security_answer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accepted_tou", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AMF_Account (uuid_ VARCHAR(75) null,accountId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,first_name VARCHAR(75) null,last_name VARCHAR(75) null,email_address VARCHAR(75) null,username VARCHAR(75) null,gender VARCHAR(75) null,birthday DATE null,password_ VARCHAR(75) null,home_phone INTEGER,mobile_phone INTEGER,address VARCHAR(75) null,address2 VARCHAR(75) null,city VARCHAR(75) null,state_ VARCHAR(75) null,zip INTEGER,security_question VARCHAR(75) null,security_answer VARCHAR(75) null,accepted_tou VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table AMF_Account";

	public static final String ORDER_BY_JPQL =
		" ORDER BY account.first_name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AMF_Account.first_name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FIRST_NAME_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccountModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accountId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccountId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accountId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Account.class;
	}

	@Override
	public String getModelClassName() {
		return Account.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Account, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Account, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Account, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Account)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Account, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Account, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Account)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Account, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Account, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Account>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Account.class.getClassLoader(), Account.class, ModelWrapper.class);

		try {
			Constructor<Account> constructor =
				(Constructor<Account>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Account, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Account, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Account, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Account, Object>>();
		Map<String, BiConsumer<Account, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Account, ?>>();

		attributeGetterFunctions.put("uuid", Account::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Account, String>)Account::setUuid);
		attributeGetterFunctions.put("accountId", Account::getAccountId);
		attributeSetterBiConsumers.put(
			"accountId", (BiConsumer<Account, Long>)Account::setAccountId);
		attributeGetterFunctions.put("groupId", Account::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Account, Long>)Account::setGroupId);
		attributeGetterFunctions.put("companyId", Account::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Account, Long>)Account::setCompanyId);
		attributeGetterFunctions.put("userId", Account::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Account, Long>)Account::setUserId);
		attributeGetterFunctions.put("userName", Account::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Account, String>)Account::setUserName);
		attributeGetterFunctions.put("createDate", Account::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Account, Date>)Account::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Account::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Account, Date>)Account::setModifiedDate);
		attributeGetterFunctions.put("first_name", Account::getFirst_name);
		attributeSetterBiConsumers.put(
			"first_name", (BiConsumer<Account, String>)Account::setFirst_name);
		attributeGetterFunctions.put("last_name", Account::getLast_name);
		attributeSetterBiConsumers.put(
			"last_name", (BiConsumer<Account, String>)Account::setLast_name);
		attributeGetterFunctions.put(
			"email_address", Account::getEmail_address);
		attributeSetterBiConsumers.put(
			"email_address",
			(BiConsumer<Account, String>)Account::setEmail_address);
		attributeGetterFunctions.put("username", Account::getUsername);
		attributeSetterBiConsumers.put(
			"username", (BiConsumer<Account, String>)Account::setUsername);
		attributeGetterFunctions.put("gender", Account::getGender);
		attributeSetterBiConsumers.put(
			"gender", (BiConsumer<Account, String>)Account::setGender);
		attributeGetterFunctions.put("birthday", Account::getBirthday);
		attributeSetterBiConsumers.put(
			"birthday", (BiConsumer<Account, Date>)Account::setBirthday);
		attributeGetterFunctions.put("password", Account::getPassword);
		attributeSetterBiConsumers.put(
			"password", (BiConsumer<Account, String>)Account::setPassword);
		attributeGetterFunctions.put("home_phone", Account::getHome_phone);
		attributeSetterBiConsumers.put(
			"home_phone", (BiConsumer<Account, Integer>)Account::setHome_phone);
		attributeGetterFunctions.put("mobile_phone", Account::getMobile_phone);
		attributeSetterBiConsumers.put(
			"mobile_phone",
			(BiConsumer<Account, Integer>)Account::setMobile_phone);
		attributeGetterFunctions.put("address", Account::getAddress);
		attributeSetterBiConsumers.put(
			"address", (BiConsumer<Account, String>)Account::setAddress);
		attributeGetterFunctions.put("address2", Account::getAddress2);
		attributeSetterBiConsumers.put(
			"address2", (BiConsumer<Account, String>)Account::setAddress2);
		attributeGetterFunctions.put("city", Account::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<Account, String>)Account::setCity);
		attributeGetterFunctions.put("state", Account::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<Account, String>)Account::setState);
		attributeGetterFunctions.put("zip", Account::getZip);
		attributeSetterBiConsumers.put(
			"zip", (BiConsumer<Account, Integer>)Account::setZip);
		attributeGetterFunctions.put(
			"security_question", Account::getSecurity_question);
		attributeSetterBiConsumers.put(
			"security_question",
			(BiConsumer<Account, String>)Account::setSecurity_question);
		attributeGetterFunctions.put(
			"security_answer", Account::getSecurity_answer);
		attributeSetterBiConsumers.put(
			"security_answer",
			(BiConsumer<Account, String>)Account::setSecurity_answer);
		attributeGetterFunctions.put("accepted_tou", Account::getAccepted_tou);
		attributeSetterBiConsumers.put(
			"accepted_tou",
			(BiConsumer<Account, String>)Account::setAccepted_tou);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccountId() {
		return _accountId;
	}

	@Override
	public void setAccountId(long accountId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accountId = accountId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFirst_name() {
		if (_first_name == null) {
			return "";
		}
		else {
			return _first_name;
		}
	}

	@Override
	public void setFirst_name(String first_name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_first_name = first_name;
	}

	@JSON
	@Override
	public String getLast_name() {
		if (_last_name == null) {
			return "";
		}
		else {
			return _last_name;
		}
	}

	@Override
	public void setLast_name(String last_name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_last_name = last_name;
	}

	@JSON
	@Override
	public String getEmail_address() {
		if (_email_address == null) {
			return "";
		}
		else {
			return _email_address;
		}
	}

	@Override
	public void setEmail_address(String email_address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email_address = email_address;
	}

	@JSON
	@Override
	public String getUsername() {
		if (_username == null) {
			return "";
		}
		else {
			return _username;
		}
	}

	@Override
	public void setUsername(String username) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_username = username;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public Date getBirthday() {
		return _birthday;
	}

	@Override
	public void setBirthday(Date birthday) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_birthday = birthday;
	}

	@JSON
	@Override
	public String getPassword() {
		if (_password == null) {
			return "";
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_password = password;
	}

	@JSON
	@Override
	public int getHome_phone() {
		return _home_phone;
	}

	@Override
	public void setHome_phone(int home_phone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_home_phone = home_phone;
	}

	@JSON
	@Override
	public int getMobile_phone() {
		return _mobile_phone;
	}

	@Override
	public void setMobile_phone(int mobile_phone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobile_phone = mobile_phone;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@JSON
	@Override
	public String getAddress2() {
		if (_address2 == null) {
			return "";
		}
		else {
			return _address2;
		}
	}

	@Override
	public void setAddress2(String address2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address2 = address2;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_state = state;
	}

	@JSON
	@Override
	public int getZip() {
		return _zip;
	}

	@Override
	public void setZip(int zip) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_zip = zip;
	}

	@JSON
	@Override
	public String getSecurity_question() {
		if (_security_question == null) {
			return "";
		}
		else {
			return _security_question;
		}
	}

	@Override
	public void setSecurity_question(String security_question) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_security_question = security_question;
	}

	@JSON
	@Override
	public String getSecurity_answer() {
		if (_security_answer == null) {
			return "";
		}
		else {
			return _security_answer;
		}
	}

	@Override
	public void setSecurity_answer(String security_answer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_security_answer = security_answer;
	}

	@JSON
	@Override
	public String getAccepted_tou() {
		if (_accepted_tou == null) {
			return "";
		}
		else {
			return _accepted_tou;
		}
	}

	@Override
	public void setAccepted_tou(String accepted_tou) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accepted_tou = accepted_tou;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Account.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Account.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Account toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Account>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccountImpl accountImpl = new AccountImpl();

		accountImpl.setUuid(getUuid());
		accountImpl.setAccountId(getAccountId());
		accountImpl.setGroupId(getGroupId());
		accountImpl.setCompanyId(getCompanyId());
		accountImpl.setUserId(getUserId());
		accountImpl.setUserName(getUserName());
		accountImpl.setCreateDate(getCreateDate());
		accountImpl.setModifiedDate(getModifiedDate());
		accountImpl.setFirst_name(getFirst_name());
		accountImpl.setLast_name(getLast_name());
		accountImpl.setEmail_address(getEmail_address());
		accountImpl.setUsername(getUsername());
		accountImpl.setGender(getGender());
		accountImpl.setBirthday(getBirthday());
		accountImpl.setPassword(getPassword());
		accountImpl.setHome_phone(getHome_phone());
		accountImpl.setMobile_phone(getMobile_phone());
		accountImpl.setAddress(getAddress());
		accountImpl.setAddress2(getAddress2());
		accountImpl.setCity(getCity());
		accountImpl.setState(getState());
		accountImpl.setZip(getZip());
		accountImpl.setSecurity_question(getSecurity_question());
		accountImpl.setSecurity_answer(getSecurity_answer());
		accountImpl.setAccepted_tou(getAccepted_tou());

		accountImpl.resetOriginalValues();

		return accountImpl;
	}

	@Override
	public Account cloneWithOriginalValues() {
		AccountImpl accountImpl = new AccountImpl();

		accountImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		accountImpl.setAccountId(
			this.<Long>getColumnOriginalValue("accountId"));
		accountImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		accountImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accountImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		accountImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accountImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accountImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accountImpl.setFirst_name(
			this.<String>getColumnOriginalValue("first_name"));
		accountImpl.setLast_name(
			this.<String>getColumnOriginalValue("last_name"));
		accountImpl.setEmail_address(
			this.<String>getColumnOriginalValue("email_address"));
		accountImpl.setUsername(
			this.<String>getColumnOriginalValue("username"));
		accountImpl.setGender(this.<String>getColumnOriginalValue("gender"));
		accountImpl.setBirthday(this.<Date>getColumnOriginalValue("birthday"));
		accountImpl.setPassword(
			this.<String>getColumnOriginalValue("password_"));
		accountImpl.setHome_phone(
			this.<Integer>getColumnOriginalValue("home_phone"));
		accountImpl.setMobile_phone(
			this.<Integer>getColumnOriginalValue("mobile_phone"));
		accountImpl.setAddress(this.<String>getColumnOriginalValue("address"));
		accountImpl.setAddress2(
			this.<String>getColumnOriginalValue("address2"));
		accountImpl.setCity(this.<String>getColumnOriginalValue("city"));
		accountImpl.setState(this.<String>getColumnOriginalValue("state_"));
		accountImpl.setZip(this.<Integer>getColumnOriginalValue("zip"));
		accountImpl.setSecurity_question(
			this.<String>getColumnOriginalValue("security_question"));
		accountImpl.setSecurity_answer(
			this.<String>getColumnOriginalValue("security_answer"));
		accountImpl.setAccepted_tou(
			this.<String>getColumnOriginalValue("accepted_tou"));

		return accountImpl;
	}

	@Override
	public int compareTo(Account account) {
		int value = 0;

		value = getFirst_name().compareTo(account.getFirst_name());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Account)) {
			return false;
		}

		Account account = (Account)object;

		long primaryKey = account.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Account> toCacheModel() {
		AccountCacheModel accountCacheModel = new AccountCacheModel();

		accountCacheModel.uuid = getUuid();

		String uuid = accountCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accountCacheModel.uuid = null;
		}

		accountCacheModel.accountId = getAccountId();

		accountCacheModel.groupId = getGroupId();

		accountCacheModel.companyId = getCompanyId();

		accountCacheModel.userId = getUserId();

		accountCacheModel.userName = getUserName();

		String userName = accountCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accountCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accountCacheModel.createDate = createDate.getTime();
		}
		else {
			accountCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accountCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			accountCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accountCacheModel.first_name = getFirst_name();

		String first_name = accountCacheModel.first_name;

		if ((first_name != null) && (first_name.length() == 0)) {
			accountCacheModel.first_name = null;
		}

		accountCacheModel.last_name = getLast_name();

		String last_name = accountCacheModel.last_name;

		if ((last_name != null) && (last_name.length() == 0)) {
			accountCacheModel.last_name = null;
		}

		accountCacheModel.email_address = getEmail_address();

		String email_address = accountCacheModel.email_address;

		if ((email_address != null) && (email_address.length() == 0)) {
			accountCacheModel.email_address = null;
		}

		accountCacheModel.username = getUsername();

		String username = accountCacheModel.username;

		if ((username != null) && (username.length() == 0)) {
			accountCacheModel.username = null;
		}

		accountCacheModel.gender = getGender();

		String gender = accountCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			accountCacheModel.gender = null;
		}

		Date birthday = getBirthday();

		if (birthday != null) {
			accountCacheModel.birthday = birthday.getTime();
		}
		else {
			accountCacheModel.birthday = Long.MIN_VALUE;
		}

		accountCacheModel.password = getPassword();

		String password = accountCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			accountCacheModel.password = null;
		}

		accountCacheModel.home_phone = getHome_phone();

		accountCacheModel.mobile_phone = getMobile_phone();

		accountCacheModel.address = getAddress();

		String address = accountCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			accountCacheModel.address = null;
		}

		accountCacheModel.address2 = getAddress2();

		String address2 = accountCacheModel.address2;

		if ((address2 != null) && (address2.length() == 0)) {
			accountCacheModel.address2 = null;
		}

		accountCacheModel.city = getCity();

		String city = accountCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			accountCacheModel.city = null;
		}

		accountCacheModel.state = getState();

		String state = accountCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			accountCacheModel.state = null;
		}

		accountCacheModel.zip = getZip();

		accountCacheModel.security_question = getSecurity_question();

		String security_question = accountCacheModel.security_question;

		if ((security_question != null) && (security_question.length() == 0)) {
			accountCacheModel.security_question = null;
		}

		accountCacheModel.security_answer = getSecurity_answer();

		String security_answer = accountCacheModel.security_answer;

		if ((security_answer != null) && (security_answer.length() == 0)) {
			accountCacheModel.security_answer = null;
		}

		accountCacheModel.accepted_tou = getAccepted_tou();

		String accepted_tou = accountCacheModel.accepted_tou;

		if ((accepted_tou != null) && (accepted_tou.length() == 0)) {
			accountCacheModel.accepted_tou = null;
		}

		return accountCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Account, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Account, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Account, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Account)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Account, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Account, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Account, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Account)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Account>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _accountId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _first_name;
	private String _last_name;
	private String _email_address;
	private String _username;
	private String _gender;
	private Date _birthday;
	private String _password;
	private int _home_phone;
	private int _mobile_phone;
	private String _address;
	private String _address2;
	private String _city;
	private String _state;
	private int _zip;
	private String _security_question;
	private String _security_answer;
	private String _accepted_tou;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Account, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Account)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("accountId", _accountId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("first_name", _first_name);
		_columnOriginalValues.put("last_name", _last_name);
		_columnOriginalValues.put("email_address", _email_address);
		_columnOriginalValues.put("username", _username);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("birthday", _birthday);
		_columnOriginalValues.put("password_", _password);
		_columnOriginalValues.put("home_phone", _home_phone);
		_columnOriginalValues.put("mobile_phone", _mobile_phone);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("address2", _address2);
		_columnOriginalValues.put("city", _city);
		_columnOriginalValues.put("state_", _state);
		_columnOriginalValues.put("zip", _zip);
		_columnOriginalValues.put("security_question", _security_question);
		_columnOriginalValues.put("security_answer", _security_answer);
		_columnOriginalValues.put("accepted_tou", _accepted_tou);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("password_", "password");
		attributeNames.put("state_", "state");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("accountId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("first_name", 256L);

		columnBitmasks.put("last_name", 512L);

		columnBitmasks.put("email_address", 1024L);

		columnBitmasks.put("username", 2048L);

		columnBitmasks.put("gender", 4096L);

		columnBitmasks.put("birthday", 8192L);

		columnBitmasks.put("password_", 16384L);

		columnBitmasks.put("home_phone", 32768L);

		columnBitmasks.put("mobile_phone", 65536L);

		columnBitmasks.put("address", 131072L);

		columnBitmasks.put("address2", 262144L);

		columnBitmasks.put("city", 524288L);

		columnBitmasks.put("state_", 1048576L);

		columnBitmasks.put("zip", 2097152L);

		columnBitmasks.put("security_question", 4194304L);

		columnBitmasks.put("security_answer", 8388608L);

		columnBitmasks.put("accepted_tou", 16777216L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Account _escapedModel;

}